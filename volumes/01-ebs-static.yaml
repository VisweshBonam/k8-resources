
#PV - representation of volume which is outside the cluster 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ebs-static-pv
spec:
  accessModes:
  - ReadWriteOnce  #one Pod can read and write at a time
  capacity:
    storage: 20Gi
  csi:
    driver: ebs.csi.aws.com
    fsType: ext4
    volumeHandle: vol-0ea4ec6b68fcd1eaf

---
# PVC --claiming storage from PV
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-static-pvc
spec:
  storageClassName: "" # Empty string must be explicitly set otherwise default StorageClass will be set
  volumeName: ebs-static-pv # give the claiming PV name
  accessModes:
    - ReadWriteOnce #one Pod can read and write at a time
  resources:
    requests:
      storage: 15Gi # we can claim near to the Disc Stoarge, we can't exceed that
                    # You requested 15Gi, but the PV is 20Gi. Since you hard-coded volumeName, Kubernetes bound them directly, and you get the full 20Gi (not reduced to 15Gi)
                    # if u request more storage than PV have, it will not claim stoarge to PVC, it keeps it as PENDING
  
---
#attaching volumes to POD

apiVersion: v1
kind: Pod
metadata:
  name: ebs-static-pod
  labels:
    purpose: ebs-static-demo
    project: roboshop
spec:
  nodeSelector:
    topology.kubernetes.io/zone: us-east-1b
  containers:
  - name: nginx
    image: nginx
  
    volumeMounts: # it is like docker run -v host-path:conatiner-path
    - name: persistent-storage
      mountPath: /usr/share/nginx/html # the data stored in  /usr/share/nginx/html will ultimately store in EBS not in ec2
      
  volumes:
  - name: persistent-storage
    persistentVolumeClaim:
      claimName: ebs-static-pvc

---

# service LB

apiVersion: v1
kind: Service
metadata:
  name: ebs-static-service
  labels:
    purpose: ebs-static-demo
    project: roboshop
spec:
  type: Loadbalancer
  selector:
    purpose: ebs-static-demo
    project: roboshop
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

